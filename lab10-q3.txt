module hexEncode(input [3:0] bin, output wire [7:0] hex);
   wire A,B,C,D;

  assign A = bin[3];
  assign B = bin[2];
  assign C = bin[1];
  assign D = bin[0];


    assign hex[7] = 1;
    assign hex[6] = (~A & ~B & ~C & ~D) | (~A & ~B & ~C & D) | (~A & B & C & D);
    assign hex[5] = (~A & ~B & ~C & D) | (~A & ~B & C & ~D) | (~A & ~B & C & D) | (~A & B & C & D) | (A & B & ~C & D);
    assign hex[4] = (~A & ~B & ~C & D) | (~A & ~B & C & D) | (~A & B & ~C & ~D) | (~A & B & ~C & D) | (~A & B & C & D) | (A & ~B & ~C & D);
    assign hex[3] = (~A & ~B & ~C & D) | (~A & B & ~C & ~D) | (~A & B & C & D) | (A & ~B & C & ~D) | (A & B & C & D);
    assign hex[2] = (~A & ~B & C & ~D) | (A & B & ~C & ~D) | (A & B & C & ~D) | (A & B & C & D);
    assign hex[1] = (~A & B & ~C & D) |  (~A & B & C & ~D) | (A & ~B & C & D) |  (A & B & ~C & ~D) | (A & B & C & ~D) |  (A & B & C & D);
    assign hex[0] = (~A & B & ~C & ~D) | (A & ~B & C & D) | (A & B & ~C & D) | (~A&~B&~C&D);
endmodule

module display_4_hex(
    input [15:0] sw,
    input clk_1kHz,
    output [7:0] D0_seg, D1_seg,
    output [3:0] D0_a, D1_a
);

// Implement wires for segment components
wire [7:0] seg0, seg1, seg2, seg3;
hexEncode h0(sw[3:0], seg0);
hexEncode h1(sw[7:4], seg1);
hexEncode h2(sw[11:8], seg2);
hexEncode h3(sw[15:12], seg3);

// Use a counter to switch between displays
reg [1:0] display_counter;

always @(posedge clk_1kHz) begin
    display_counter <= display_counter + 1;
end

// Use ternary operators to select position from display_counter
assign D0_seg = (display_counter == 2'b00) ? seg0 : (display_counter == 2'b01) ? seg1 : (display_counter == 2'b10) ? seg2 : seg3;
assign D0_a  = (display_counter == 2'b00) ? 4'b1110 : (display_counter == 2'b01) ? 4'b1101 : (display_counter == 2'b10) ? 4'b1011 : 4'b0111;

endmodule

module top(
    input [15:0] sw,
    input mclk,
    output [7:0] D0_seg, D1_seg,
    output [3:0] D0_a, D1_a
);

// Generate 1 kHz clock
reg [25:0] clk_divider;
wire clk_1kHz;

always @(posedge mclk) begin
    if (clk_divider ==  (67_108_864/1000) - 1) begin
        clk_divider <= 0;
    end
    else begin
        clk_divider <= clk_divider + 1;
    end
end

assign clk_1kHz = (clk_divider == 0);

// Instantiate display_4_hex module
display_4_hex disp(
    .sw(sw),
    .clk_1kHz(clk_1kHz),
    .D0_seg(D0_seg),
    .D1_seg(D1_seg),
    .D0_a(D0_a),
    .D1_a(D1_a)
);

endmodule
